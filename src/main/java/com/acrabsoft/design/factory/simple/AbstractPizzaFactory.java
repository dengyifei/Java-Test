package com.acrabsoft.design.factory.simple;

/**
 * <p>
 * 优点 1、
 * 抽象工厂隔离了具体类的生成，是的客户端不需要知道什么被创建。所有的具体工厂都实现了抽象工厂中定义的公共接口，因此只需要改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。
 * 
 * 2、 当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。
 * 
 * <p>
 * 缺点 添加新的行为时比较麻烦。如果需要添加一个新产品族对象时，需要更改接口及其下所有子类，这必然会带来很大的麻烦。
 * 
 * <p>
 * 模式使用场景
 *  一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。
 * 2.系统中有多于一个的产品族，而每次只使用其中某一产品族。
 * 
 * 属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。
 * 
 * 系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。
 * 
 * @author Administrator
 *
 */
public abstract class AbstractPizzaFactory {
	public abstract String createSource();

}
