package com.acrabsoft.design.observer;

/**
 * 优点：
 * 1、当两个对象之间送耦合，他们依然可以交互，但是不太清楚彼此的细节。观察者模式提供了一种对象设计，让主题和观察者之间送耦合。主题所知道只是一个具体的观察者列表，每一个具体观察者都符合一个抽象观察者的接口。主题并不认识任何一个具体的观察者，它只知道他们都有一个共同的接口。
 * 
 * 2、观察者模式支持“广播通信”。主题会向所有的观察者发出通知。
 * 
 * 3、观察者模式符合“开闭原则”的要求。
 * 
 * 缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。
 * 
 * 2、 如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进 行循环调用，可能导致系统崩溃。
 * 
 * 3、 观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。
 * 
 * 五、观察者模式的适用场所 ​ 1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。
 * 
 * 2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。
 * 
 * 3、一个对象必须通知其他对象，而并不知道这些对象是谁。需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。
 * 
 * @author Administrator
 *
 */
public class Client {
	public static void main(String args[]) {
		WeatherData weatherData = new WeatherData();
		weatherData.registerObserver(new CurrentConditionsDisplay());

		weatherData.setMeasurements(1, 2, 3);
	}
}
